<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="AutoImportSettings">
    <option name="autoReloadType" value="SELECTIVE" />
  </component>
  <component name="ChangeListManager">
    <list default="true" id="7d14de2f-65c0-4bbd-85b6-03fd211dc65a" name="Changes" comment="" />
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="HighlightingSettingsPerFile">
    <setting file="file://$PROJECT_DIR$/Assets/Scripts/Attack/MeleeAttack.cs" root0="FORCE_HIGHLIGHTING" />
    <setting file="file://$PROJECT_DIR$/Assets/Scripts/HealthSystem/HealthBar.cs" root0="FORCE_HIGHLIGHTING" />
    <setting file="file://$PROJECT_DIR$/Assets/Scripts/JoystickLogic/JoystickMovement.cs" root0="FORCE_HIGHLIGHTING" />
    <setting file="file://$PROJECT_DIR$/Assets/Scripts/Spawn.cs" root0="FORCE_HIGHLIGHTING" />
    <setting file="file://$PROJECT_DIR$/Assets/Scripts/UI.cs" root0="FORCE_HIGHLIGHTING" />
  </component>
  <component name="ProjectId" id="2a5UInoIVhXOBbQ9CZIZQIycalX" />
  <component name="ProjectViewState">
    <option name="hideEmptyMiddlePackages" value="true" />
    <option name="showLibraryContents" value="true" />
  </component>
  <component name="PropertiesComponent"><![CDATA[{
  "keyToString": {
    "RunOnceActivity.OpenProjectViewOnStart": "true",
    "RunOnceActivity.ShowReadmeOnStart": "true",
    "settings.editor.selected.configurable": "preferences.pluginManager"
  },
  "keyToStringList": {
    "rider.external.source.directories": [
      "C:\\Users\\vasya\\AppData\\Roaming\\JetBrains\\Rider2023.1\\resharper-host\\DecompilerCache",
      "C:\\Users\\vasya\\AppData\\Roaming\\JetBrains\\Rider2023.1\\resharper-host\\SourcesCache",
      "C:\\Users\\vasya\\AppData\\Local\\Symbols\\src"
    ]
  }
}]]></component>
  <component name="RunManager" selected="Attach to Unity Editor.Attach to Unity Editor">
    <configuration name="Start Unity" type="RunUnityExe" factoryName="Unity Executable">
      <option name="EXE_PATH" value="C:\Program Files\Unity\Hub\Editor\2022.3.15f1\Editor\Unity.exe" />
      <option name="PROGRAM_PARAMETERS" value="-projectPath C:\UnityProjects\Final\FinalProject -debugCodeOptimization" />
      <option name="WORKING_DIRECTORY" value="C:\UnityProjects\Final\FinalProject" />
      <option name="PASS_PARENT_ENVS" value="1" />
      <option name="USE_EXTERNAL_CONSOLE" value="0" />
      <method v="2" />
    </configuration>
    <configuration name="Unit Tests (batch mode)" type="RunUnityExe" factoryName="Unity Executable">
      <option name="EXE_PATH" value="C:\Program Files\Unity\Hub\Editor\2022.3.15f1\Editor\Unity.exe" />
      <option name="PROGRAM_PARAMETERS" value="-runTests -batchmode -projectPath C:\UnityProjects\Final\FinalProject -testResults Logs/results.xml -testPlatform EditMode -debugCodeOptimization" />
      <option name="WORKING_DIRECTORY" value="C:\UnityProjects\Final\FinalProject" />
      <option name="PASS_PARENT_ENVS" value="1" />
      <option name="USE_EXTERNAL_CONSOLE" value="0" />
      <method v="2" />
    </configuration>
    <configuration name="Attach to Unity Editor &amp; Play" type="UNITY_DEBUG_RUN_CONFIGURATION" factoryName="UNITY_ATTACH_AND_PLAY" show_console_on_std_err="false" show_console_on_std_out="false" port="50000" address="localhost">
      <option name="allowRunningInParallel" value="false" />
      <option name="listenPortForConnections" value="false" />
      <option name="pid" />
      <option name="projectPathOnTarget" />
      <option name="selectedOptions">
        <list />
      </option>
      <method v="2" />
    </configuration>
    <configuration name="Attach to Unity Editor" type="UNITY_DEBUG_RUN_CONFIGURATION" factoryName="Unity Debug" show_console_on_std_err="false" show_console_on_std_out="false" port="50000" address="localhost">
      <option name="allowRunningInParallel" value="false" />
      <option name="listenPortForConnections" value="false" />
      <option name="pid" />
      <option name="projectPathOnTarget" />
      <option name="selectedOptions">
        <list />
      </option>
      <method v="2" />
    </configuration>
  </component>
  <component name="SpellCheckerSettings" RuntimeDictionaries="0" Folders="0" CustomDictionaries="0" DefaultDictionary="application-level" UseSingleDictionary="true" transferred="true" />
  <component name="TaskManager">
    <task active="true" id="Default" summary="Default task">
      <changelist id="7d14de2f-65c0-4bbd-85b6-03fd211dc65a" name="Changes" comment="" />
      <created>1703607916529</created>
      <option name="number" value="Default" />
      <option name="presentableId" value="Default" />
      <updated>1703607916529</updated>
      <workItem from="1703607939649" duration="9483000" />
      <workItem from="1703676673615" duration="5862000" />
      <workItem from="1703692943545" duration="2128000" />
      <workItem from="1703794397360" duration="2062000" />
      <workItem from="1704197869522" duration="3563000" />
      <workItem from="1704281697919" duration="7182000" />
      <workItem from="1704299960081" duration="7493000" />
    </task>
    <servers />
  </component>
  <component name="UnityProjectConfiguration" hasMinimizedUI="true" />
  <component name="UnityUnitTestConfiguration" currentTestLauncher="Both" />
  <component name="VcsManagerConfiguration">
    <option name="CLEAR_INITIAL_COMMIT_MESSAGE" value="true" />
  </component>
  <component name="com.github.evgenys91.machinet.common.dslhistory.DslHistoryState">
    <option name="historyDtoById">
      <map>
        <entry key="35ac34">
          <value>
            <ChatHistoryModel>
              <option name="contextFilesPaths">
                <list>
                  <option value="$PROJECT_DIR$/Assets/Scripts/Spawn.cs" />
                </list>
              </option>
              <option name="id" value="35ac34" />
              <option name="initiateTms" value="1704303754087" />
              <option name="request" value="почему не работате coroutine" />
              <option name="response" value="" />
              <option name="responseDescription" value="Из вашего кода я вижу, что у вас есть метод `Delay()`, который использует `yield return new WaitForSeconds(delaySpawnTime)` для создания задержки. Однако, я не вижу, что бы этот метод был вызван в вашем коде.&#10;&#10;Чтобы запустить корутину `Delay()`, вы должны вызвать ее с помощью метода `StartCoroutine()`. Вот как вы можете изменить ваш код, чтобы корутина начала работать:&#10;&#10;```csharp&#10;private void OnDeath(GameObject target)&#10;{&#10;    spawnObject.gameObject.SetActive(false);&#10;    spawnObject.transform.position = new Vector3(spawnPoint.position.x, spawnObject.transform.position.y, spawnPoint.position.z);&#10;    StartCoroutine(Delay()); // Запуск корутины&#10;    spawnObject.gameObject.SetActive(true);&#10;}&#10;```&#10;&#10;Теперь, когда метод `Delay()` вызывается с помощью `StartCoroutine()`, корутина будет выполняться и создавать задержку, указанную в `delaySpawnTime`. Убедитесь, что значение `delaySpawnTime` больше нуля, чтобы задержка была заметной." />
              <option name="responseFileName" value="" />
              <option name="responseFilePath" value="" />
              <option name="responseTms" value="1704303757918" />
              <option name="usedFilesPaths">
                <list>
                  <option value="$PROJECT_DIR$/Assets/Scripts/Spawn.cs" />
                </list>
              </option>
            </ChatHistoryModel>
          </value>
        </entry>
        <entry key="67be88">
          <value>
            <ChatHistoryModel>
              <option name="contextFilesPaths">
                <list>
                  <option value="$PROJECT_DIR$/Assets/Scripts/Spawn.cs" />
                </list>
              </option>
              <option name="id" value="67be88" />
              <option name="initiateTms" value="1704301032799" />
              <option name="request" value="как переместить объект в заданную позицию" />
              <option name="response" value="" />
              <option name="responseDescription" value="Чтобы переместить объект в заданную позицию, вам нужно изменить значение его свойства `transform.position`. В вашем случае, чтобы переместить объект `spawnObject` в позицию `spawnPoint`, вы можете использовать следующий код:&#10;&#10;```csharp&#10;spawnObject.transform.position = spawnPoint.position;&#10;```&#10;&#10;Этот код устанавливает позицию объекта `spawnObject` равной позиции `spawnPoint`. После выполнения этой строки кода, объект будет перемещен в заданную позицию." />
              <option name="responseFileName" value="" />
              <option name="responseFilePath" value="" />
              <option name="responseTms" value="1704301036788" />
              <option name="usedFilesPaths">
                <list>
                  <option value="$PROJECT_DIR$/Assets/Scripts/Spawn.cs" />
                </list>
              </option>
            </ChatHistoryModel>
          </value>
        </entry>
        <entry key="c2dfc7">
          <value>
            <ChatHistoryModel>
              <option name="contextFilesPaths">
                <list>
                  <option value="$PROJECT_DIR$/Assets/Scripts/Spawn.cs" />
                </list>
              </option>
              <option name="id" value="c2dfc7" />
              <option name="initiateTms" value="1704304037530" />
              <option name="request" value="она не вызывается" />
              <option name="response" value="" />
              <option name="responseDescription" value="Приношу извинения за путаницу. Я заметил, что в вашем коде отсутствует вызов метода `StartCoroutine()` для запуска корутины `DelayTime()`. Вот как вы можете изменить ваш код, чтобы корутина начала работать:&#10;&#10;```csharp&#10;private void OnDeath(GameObject target)&#10;{&#10;    spawnObject.gameObject.SetActive(false);&#10;    spawnObject.transform.position = new Vector3(spawnPoint.position.x, spawnObject.transform.position.y, spawnPoint.position.z);&#10;    StartCoroutine(DelayTime()); // Запуск корутины&#10;}&#10;&#10;IEnumerator DelayTime()&#10;{&#10;    Debug.Log(&quot;Delay&quot;);&#10;    yield return new WaitForSeconds(delaySpawnTime);&#10;&#10;    spawnObject.gameObject.SetActive(true);&#10;}&#10;```&#10;&#10;Теперь, когда метод `DelayTime()` вызывается с помощью `StartCoroutine()`, корутина будет выполняться и создавать задержку, указанную в `delaySpawnTime`. Убедитесь, что значение `delaySpawnTime` больше нуля, чтобы задержка была заметной." />
              <option name="responseFileName" value="" />
              <option name="responseFilePath" value="" />
              <option name="responseTms" value="1704304040536" />
              <option name="usedFilesPaths">
                <list>
                  <option value="$PROJECT_DIR$/Assets/Scripts/Spawn.cs" />
                </list>
              </option>
            </ChatHistoryModel>
          </value>
        </entry>
        <entry key="c6ba3d">
          <value>
            <ChatHistoryModel>
              <option name="contextFilesPaths">
                <list>
                  <option value="$PROJECT_DIR$/Assets/Scripts/Spawn.cs" />
                </list>
              </option>
              <option name="id" value="c6ba3d" />
              <option name="initiateTms" value="1704303885224" />
              <option name="request" value="но у меня есть вызов метода" />
              <option name="response" value="" />
              <option name="responseDescription" value="Извините за недоразумение. В вашем коде я вижу вызов метода `StartCoroutine(DelayTime())`, который должен запускать корутину `DelayTime()`. Однако, я заметил, что в вашем коде отсутствует блок кода, который должен выполняться после задержки.&#10;&#10;Чтобы корутина работала должным образом, вам нужно добавить код, который должен выполняться после задержки, внутри блока `yield return new WaitForSeconds(delaySpawnTime)`. Вот пример, как вы можете изменить ваш код:&#10;&#10;```csharp&#10;IEnumerator DelayTime()&#10;{&#10;    Debug.Log(&quot;Delay&quot;);&#10;    yield return new WaitForSeconds(delaySpawnTime);&#10;&#10;    // Код, который должен выполняться после задержки&#10;    spawnObject.gameObject.SetActive(true);&#10;    // spawnObject.GetComponent&lt;HealthSystem&gt;().Death -= OnDeath;&#10;}&#10;```&#10;&#10;Теперь, после задержки, код внутри блока `yield return new WaitForSeconds(delaySpawnTime)` будет выполнен. Убедитесь, что значение `delaySpawnTime` больше нуля, чтобы задержка была заметной." />
              <option name="responseFileName" value="" />
              <option name="responseFilePath" value="" />
              <option name="responseTms" value="1704303891333" />
              <option name="usedFilesPaths">
                <list>
                  <option value="$PROJECT_DIR$/Assets/Scripts/Spawn.cs" />
                </list>
              </option>
            </ChatHistoryModel>
          </value>
        </entry>
        <entry key="d1a729">
          <value>
            <ChatHistoryModel>
              <option name="contextFilesPaths">
                <list>
                  <option value="$PROJECT_DIR$/Assets/Scripts/Spawn.cs" />
                </list>
              </option>
              <option name="id" value="d1a729" />
              <option name="initiateTms" value="1704303977653" />
              <option name="request" value="оно не вызывается" />
              <option name="response" value="" />
              <option name="responseDescription" value="Приношу извинения за путаницу. Я заметил, что в вашем коде отсутствует вызов метода `StartCoroutine()` для запуска корутины `DelayTime()`. Вот как вы можете изменить ваш код, чтобы корутина начала работать:&#10;&#10;```csharp&#10;private void OnDeath(GameObject target)&#10;{&#10;    spawnObject.gameObject.SetActive(false);&#10;    spawnObject.transform.position = new Vector3(spawnPoint.position.x, spawnObject.transform.position.y, spawnPoint.position.z);&#10;    StartCoroutine(DelayTime()); // Запуск корутины&#10;}&#10;&#10;IEnumerator DelayTime()&#10;{&#10;    Debug.Log(&quot;Delay&quot;);&#10;    yield return new WaitForSeconds(delaySpawnTime);&#10;&#10;    spawnObject.gameObject.SetActive(true);&#10;}&#10;```&#10;&#10;Теперь, когда метод `DelayTime()` вызывается с помощью `StartCoroutine()`, корутина будет выполняться и создавать задержку, указанную в `delaySpawnTime`. Убедитесь, что значение `delaySpawnTime` больше нуля, чтобы задержка была заметной." />
              <option name="responseFileName" value="" />
              <option name="responseFilePath" value="" />
              <option name="responseTms" value="1704303980765" />
              <option name="usedFilesPaths">
                <list>
                  <option value="$PROJECT_DIR$/Assets/Scripts/Spawn.cs" />
                </list>
              </option>
            </ChatHistoryModel>
          </value>
        </entry>
        <entry key="d96910">
          <value>
            <ChatHistoryModel>
              <option name="contextFilesPaths">
                <list>
                  <option value="$PROJECT_DIR$/Assets/Scripts/Spawn.cs" />
                </list>
              </option>
              <option name="id" value="d96910" />
              <option name="initiateTms" value="1704303855054" />
              <option name="request" value="не вызывается" />
              <option name="response" value="" />
              <option name="responseDescription" value="Извините за путаницу. Я заметил, что в вашем коде отсутствует вызов метода `StartCoroutine()` для запуска корутины `DelayTime()`. Вот как вы можете изменить ваш код, чтобы корутина начала работать:&#10;&#10;```csharp&#10;private void OnDeath(GameObject target)&#10;{&#10;    spawnObject.gameObject.SetActive(false);&#10;    spawnObject.transform.position = new Vector3(spawnPoint.position.x, spawnObject.transform.position.y, spawnPoint.position.z);&#10;    StartCoroutine(DelayTime()); // Запуск корутины&#10;    spawnObject.gameObject.SetActive(true);&#10;}&#10;```&#10;&#10;Теперь, когда метод `DelayTime()` вызывается с помощью `StartCoroutine()`, корутина будет выполняться и создавать задержку, указанную в `delaySpawnTime`. Убедитесь, что значение `delaySpawnTime` больше нуля, чтобы задержка была заметной." />
              <option name="responseFileName" value="" />
              <option name="responseFilePath" value="" />
              <option name="responseTms" value="1704303859681" />
              <option name="usedFilesPaths">
                <list>
                  <option value="$PROJECT_DIR$/Assets/Scripts/Spawn.cs" />
                </list>
              </option>
            </ChatHistoryModel>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>