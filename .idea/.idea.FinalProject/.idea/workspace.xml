<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="AutoImportSettings">
    <option name="autoReloadType" value="SELECTIVE" />
  </component>
  <component name="ChangeListManager">
    <list default="true" id="7d14de2f-65c0-4bbd-85b6-03fd211dc65a" name="Changes" comment="" />
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="HighlightingSettingsPerFile">
    <setting file="file://$PROJECT_DIR$/Assets/Scripts/Animation/Animations.cs" root0="FORCE_HIGHLIGHTING" />
    <setting file="file://$PROJECT_DIR$/Assets/Scripts/Attack/MeleeAttack.cs" root0="FORCE_HIGHLIGHTING" />
    <setting file="file://$PROJECT_DIR$/Assets/Scripts/ExperienceForDeath.cs" root0="FORCE_HIGHLIGHTING" />
    <setting file="file://$PROJECT_DIR$/Assets/Scripts/HealthSystem/HealthBar.cs" root0="FORCE_HIGHLIGHTING" />
    <setting file="file://$PROJECT_DIR$/Assets/Scripts/JoystickLogic/JoystickMovement.cs" root0="FORCE_HIGHLIGHTING" />
    <setting file="file://$PROJECT_DIR$/Assets/Scripts/Player/Experience.cs" root0="FORCE_HIGHLIGHTING" />
    <setting file="file://$PROJECT_DIR$/Assets/Scripts/Pools/ObjectsPool.cs" root0="FORCE_HIGHLIGHTING" />
    <setting file="file://$PROJECT_DIR$/Assets/Scripts/Spawn.cs" root0="FORCE_HIGHLIGHTING" />
    <setting file="file://$PROJECT_DIR$/Assets/Scripts/UI.cs" root0="FORCE_HIGHLIGHTING" />
    <setting file="file://$APPLICATION_CONFIG_DIR$/resharper-host/DecompilerCache/decompiler/db6cea5b3c9142648edbd2386e71c20a3c00/5f/9ea455cf/NativeInputSystem.cs" root0="SKIP_HIGHLIGHTING" />
  </component>
  <component name="ProjectId" id="2a5UInoIVhXOBbQ9CZIZQIycalX" />
  <component name="ProjectViewState">
    <option name="hideEmptyMiddlePackages" value="true" />
    <option name="showLibraryContents" value="true" />
  </component>
  <component name="PropertiesComponent">{
  &quot;keyToString&quot;: {
    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,
    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,
    &quot;settings.editor.selected.configurable&quot;: &quot;preferences.pluginManager&quot;
  },
  &quot;keyToStringList&quot;: {
    &quot;rider.external.source.directories&quot;: [
      &quot;C:\\Users\\vasya\\AppData\\Roaming\\JetBrains\\Rider2023.1\\resharper-host\\DecompilerCache&quot;,
      &quot;C:\\Users\\vasya\\AppData\\Roaming\\JetBrains\\Rider2023.1\\resharper-host\\SourcesCache&quot;,
      &quot;C:\\Users\\vasya\\AppData\\Local\\Symbols\\src&quot;
    ]
  }
}</component>
  <component name="RunManager" selected="Attach to Unity Editor.Attach to Unity Editor">
    <configuration name="Start Unity" type="RunUnityExe" factoryName="Unity Executable">
      <option name="EXE_PATH" value="C:\Program Files\Unity\Hub\Editor\2022.3.15f1\Editor\Unity.exe" />
      <option name="PROGRAM_PARAMETERS" value="-projectPath C:\UnityProjects\Final\FinalProject -debugCodeOptimization" />
      <option name="WORKING_DIRECTORY" value="C:\UnityProjects\Final\FinalProject" />
      <option name="PASS_PARENT_ENVS" value="1" />
      <option name="USE_EXTERNAL_CONSOLE" value="0" />
      <method v="2" />
    </configuration>
    <configuration name="Unit Tests (batch mode)" type="RunUnityExe" factoryName="Unity Executable">
      <option name="EXE_PATH" value="C:\Program Files\Unity\Hub\Editor\2022.3.15f1\Editor\Unity.exe" />
      <option name="PROGRAM_PARAMETERS" value="-runTests -batchmode -projectPath C:\UnityProjects\Final\FinalProject -testResults Logs/results.xml -testPlatform EditMode -debugCodeOptimization" />
      <option name="WORKING_DIRECTORY" value="C:\UnityProjects\Final\FinalProject" />
      <option name="PASS_PARENT_ENVS" value="1" />
      <option name="USE_EXTERNAL_CONSOLE" value="0" />
      <method v="2" />
    </configuration>
    <configuration name="Attach to Unity Editor &amp; Play" type="UNITY_DEBUG_RUN_CONFIGURATION" factoryName="UNITY_ATTACH_AND_PLAY" show_console_on_std_err="false" show_console_on_std_out="false" port="50000" address="localhost">
      <option name="allowRunningInParallel" value="false" />
      <option name="listenPortForConnections" value="false" />
      <option name="pid" />
      <option name="projectPathOnTarget" />
      <option name="selectedOptions">
        <list />
      </option>
      <method v="2" />
    </configuration>
    <configuration name="Attach to Unity Editor" type="UNITY_DEBUG_RUN_CONFIGURATION" factoryName="Unity Debug" show_console_on_std_err="false" show_console_on_std_out="false" port="50000" address="localhost">
      <option name="allowRunningInParallel" value="false" />
      <option name="listenPortForConnections" value="false" />
      <option name="pid" />
      <option name="projectPathOnTarget" />
      <option name="selectedOptions">
        <list />
      </option>
      <method v="2" />
    </configuration>
  </component>
  <component name="SpellCheckerSettings" RuntimeDictionaries="0" Folders="0" CustomDictionaries="0" DefaultDictionary="application-level" UseSingleDictionary="true" transferred="true" />
  <component name="TaskManager">
    <task active="true" id="Default" summary="Default task">
      <changelist id="7d14de2f-65c0-4bbd-85b6-03fd211dc65a" name="Changes" comment="" />
      <created>1703607916529</created>
      <option name="number" value="Default" />
      <option name="presentableId" value="Default" />
      <updated>1703607916529</updated>
      <workItem from="1703607939649" duration="9483000" />
      <workItem from="1703676673615" duration="5862000" />
      <workItem from="1703692943545" duration="2128000" />
      <workItem from="1703794397360" duration="2062000" />
      <workItem from="1704197869522" duration="3563000" />
      <workItem from="1704281697919" duration="7182000" />
      <workItem from="1704299960081" duration="7493000" />
      <workItem from="1704458807678" duration="7643000" />
      <workItem from="1704550841272" duration="2093000" />
      <workItem from="1704819891412" duration="7987000" />
      <workItem from="1704884944896" duration="14343000" />
      <workItem from="1704984634136" duration="2876000" />
      <workItem from="1705077605836" duration="2670000" />
      <workItem from="1705140778354" duration="5741000" />
      <workItem from="1705238744328" duration="5569000" />
      <workItem from="1705427972010" duration="7665000" />
      <workItem from="1705486510798" duration="6140000" />
    </task>
    <servers />
  </component>
  <component name="UnityProjectConfiguration" hasMinimizedUI="true" />
  <component name="UnityUnitTestConfiguration" currentTestLauncher="Both" />
  <component name="VcsManagerConfiguration">
    <option name="CLEAR_INITIAL_COMMIT_MESSAGE" value="true" />
  </component>
  <component name="com.github.evgenys91.machinet.common.dslhistory.DslHistoryState">
    <option name="historyDtoById">
      <map>
        <entry key="35ac34">
          <value>
            <ChatHistoryModel>
              <option name="contextFilesPaths">
                <list>
                  <option value="$PROJECT_DIR$/Assets/Scripts/Spawn.cs" />
                </list>
              </option>
              <option name="id" value="35ac34" />
              <option name="initiateTms" value="1704303754087" />
              <option name="request" value="почему не работате coroutine" />
              <option name="response" value="" />
              <option name="responseDescription" value="Из вашего кода я вижу, что у вас есть метод `Delay()`, который использует `yield return new WaitForSeconds(delaySpawnTime)` для создания задержки. Однако, я не вижу, что бы этот метод был вызван в вашем коде.&#10;&#10;Чтобы запустить корутину `Delay()`, вы должны вызвать ее с помощью метода `StartCoroutine()`. Вот как вы можете изменить ваш код, чтобы корутина начала работать:&#10;&#10;```csharp&#10;private void OnDeath(GameObject target)&#10;{&#10;    spawnObject.gameObject.SetActive(false);&#10;    spawnObject.transform.position = new Vector3(spawnPoint.position.x, spawnObject.transform.position.y, spawnPoint.position.z);&#10;    StartCoroutine(Delay()); // Запуск корутины&#10;    spawnObject.gameObject.SetActive(true);&#10;}&#10;```&#10;&#10;Теперь, когда метод `Delay()` вызывается с помощью `StartCoroutine()`, корутина будет выполняться и создавать задержку, указанную в `delaySpawnTime`. Убедитесь, что значение `delaySpawnTime` больше нуля, чтобы задержка была заметной." />
              <option name="responseFileName" value="" />
              <option name="responseFilePath" value="" />
              <option name="responseTms" value="1704303757918" />
              <option name="usedFilesPaths">
                <list>
                  <option value="$PROJECT_DIR$/Assets/Scripts/Spawn.cs" />
                </list>
              </option>
            </ChatHistoryModel>
          </value>
        </entry>
        <entry key="3c1d76">
          <value>
            <ChatHistoryModel>
              <option name="contextFilesPaths">
                <list>
                  <option value="$PROJECT_DIR$/Assets/Scripts/DamageSystem/DamageSystem.cs" />
                </list>
              </option>
              <option name="id" value="3c1d76" />
              <option name="initiateTms" value="1705148067421" />
              <option name="request" value="как заполнить num" />
              <option name="response" value="" />
              <option name="responseDescription" value="В вашем коде отсутствует объявление переменной `num`. Чтобы заполнить переменную `num`, вы должны сначала объявить ее и присвоить ей значение. Вот пример:&#10;&#10;```csharp&#10;int num; // Объявление переменной num&#10;&#10;void Start()&#10;{&#10;    num = 10; // Присвоение значения 10 переменной num&#10;}&#10;```&#10;&#10;В этом примере мы объявляем переменную `num` типа `int` и затем присваиваем ей значение 10 в методе `Start()`. Вы можете изменить значение переменной `num` на любое другое значение, которое вам нужно." />
              <option name="responseFileName" value="" />
              <option name="responseFilePath" value="" />
              <option name="responseTms" value="1705148071943" />
              <option name="usedFilesPaths">
                <list>
                  <option value="$PROJECT_DIR$/Assets/Scripts/DamageSystem/DamageSystem.cs" />
                </list>
              </option>
            </ChatHistoryModel>
          </value>
        </entry>
        <entry key="67be88">
          <value>
            <ChatHistoryModel>
              <option name="contextFilesPaths">
                <list>
                  <option value="$PROJECT_DIR$/Assets/Scripts/Spawn.cs" />
                </list>
              </option>
              <option name="id" value="67be88" />
              <option name="initiateTms" value="1704301032799" />
              <option name="request" value="как переместить объект в заданную позицию" />
              <option name="response" value="" />
              <option name="responseDescription" value="Чтобы переместить объект в заданную позицию, вам нужно изменить значение его свойства `transform.position`. В вашем случае, чтобы переместить объект `spawnObject` в позицию `spawnPoint`, вы можете использовать следующий код:&#10;&#10;```csharp&#10;spawnObject.transform.position = spawnPoint.position;&#10;```&#10;&#10;Этот код устанавливает позицию объекта `spawnObject` равной позиции `spawnPoint`. После выполнения этой строки кода, объект будет перемещен в заданную позицию." />
              <option name="responseFileName" value="" />
              <option name="responseFilePath" value="" />
              <option name="responseTms" value="1704301036788" />
              <option name="usedFilesPaths">
                <list>
                  <option value="$PROJECT_DIR$/Assets/Scripts/Spawn.cs" />
                </list>
              </option>
            </ChatHistoryModel>
          </value>
        </entry>
        <entry key="6ce487">
          <value>
            <ChatHistoryModel>
              <option name="contextFilesPaths">
                <list>
                  <option value="$PROJECT_DIR$/Assets/Scripts/DamageSystem/DamageSystem.cs" />
                </list>
              </option>
              <option name="id" value="6ce487" />
              <option name="initiateTms" value="1705148077730" />
              <option name="request" value="как заполнить Enum" />
              <option name="response" value="" />
              <option name="responseDescription" value="Для заполнения значения перечисления (enum) вам нужно присвоить переменной перечисления одно из определенных значений перечисления. В вашем коде у вас есть переменная `obj`, которая является типом перечисления. Вот пример, как заполнить переменную `obj` с помощью значения перечисления:&#10;&#10;```csharp&#10;public enum MyEnum&#10;{&#10;    Value1,&#10;    Value2,&#10;    Value3&#10;}&#10;&#10;public MyEnum obj; // Объявление переменной obj типа MyEnum&#10;&#10;void Start()&#10;{&#10;    obj = MyEnum.Value2; // Присвоение значения Value2 переменной obj&#10;}&#10;```&#10;&#10;В этом примере мы объявляем перечисление `MyEnum`, которое содержит три значения: `Value1`, `Value2` и `Value3`. Затем мы объявляем переменную `obj` типа `MyEnum` и присваиваем ей значение `Value2` в методе `Start()`. Вы можете изменить значение переменной `obj` на любое другое значение из перечисления `MyEnum`, которое вам нужно." />
              <option name="responseFileName" value="" />
              <option name="responseFilePath" value="" />
              <option name="responseTms" value="1705148081608" />
              <option name="usedFilesPaths">
                <list>
                  <option value="$PROJECT_DIR$/Assets/Scripts/DamageSystem/DamageSystem.cs" />
                </list>
              </option>
            </ChatHistoryModel>
          </value>
        </entry>
        <entry key="a8947c">
          <value>
            <ChatHistoryModel>
              <option name="contextFilesPaths">
                <list>
                  <option value="$PROJECT_DIR$/Assets/TreeMine.cs" />
                </list>
              </option>
              <option name="id" value="a8947c" />
              <option name="initiateTms" value="1704477341656" />
              <option name="request" value="можешь помочь с этой ошибкой UnityEngine.SetupCoroutine.InvokeMoveNext (System.Collections.IEnumerator enumerator, System.IntPtr returnValueAddress) (at &lt;5879d8d225474494bcffdfe64965038e&gt;:0)&#10;UnityEngine.MonoBehaviour:StartCoroutine(IEnumerator)" />
              <option name="response" value="" />
              <option name="responseDescription" value="Ошибка `UnityEngine.SetupCoroutine.InvokeMoveNext` обычно возникает, когда пытаетесь запустить корутину, но передаете неверный объект или метод в `StartCoroutine()`. Вот несколько возможных причин и решений для этой ошибки:&#10;&#10;1. Убедитесь, что вы передаете правильный объект и метод в `StartCoroutine()`. Убедитесь, что метод, который вы хотите запустить как корутину, имеет правильную сигнатуру и возвращает `IEnumerator`. Например:&#10;&#10;```csharp&#10;StartCoroutine(DelayTime()); // Правильный вызов корутины&#10;```&#10;&#10;2. Проверьте, что объект, на котором вызывается `StartCoroutine()`, является наследником класса `MonoBehaviour`. Корутины могут быть запущены только на объектах, которые наследуют `MonoBehaviour`.&#10;&#10;3. Убедитесь, что вы не пытаетесь запустить корутину из статического метода. Корутины могут быть запущены только из экземпляра класса `MonoBehaviour`.&#10;&#10;4. Если вы используете `yield return StartCoroutine()` внутри другой корутины, убедитесь, что вы правильно передаете объект и метод во внутреннем вызове `StartCoroutine()`. Например:&#10;&#10;```csharp&#10;yield return StartCoroutine(OtherCoroutine()); // Правильный вызов внутренней корутины&#10;```&#10;&#10;Если проблема не решена после проверки этих пунктов, пожалуйста, предоставьте больше информации о вашем коде и контексте, чтобы я мог помочь вам более точно." />
              <option name="responseFileName" value="" />
              <option name="responseFilePath" value="" />
              <option name="responseTms" value="1704477347087" />
              <option name="usedFilesPaths">
                <list>
                  <option value="$PROJECT_DIR$/Assets/TreeMine.cs" />
                </list>
              </option>
            </ChatHistoryModel>
          </value>
        </entry>
        <entry key="c2dfc7">
          <value>
            <ChatHistoryModel>
              <option name="contextFilesPaths">
                <list>
                  <option value="$PROJECT_DIR$/Assets/Scripts/Spawn.cs" />
                </list>
              </option>
              <option name="id" value="c2dfc7" />
              <option name="initiateTms" value="1704304037530" />
              <option name="request" value="она не вызывается" />
              <option name="response" value="" />
              <option name="responseDescription" value="Приношу извинения за путаницу. Я заметил, что в вашем коде отсутствует вызов метода `StartCoroutine()` для запуска корутины `DelayTime()`. Вот как вы можете изменить ваш код, чтобы корутина начала работать:&#10;&#10;```csharp&#10;private void OnDeath(GameObject target)&#10;{&#10;    spawnObject.gameObject.SetActive(false);&#10;    spawnObject.transform.position = new Vector3(spawnPoint.position.x, spawnObject.transform.position.y, spawnPoint.position.z);&#10;    StartCoroutine(DelayTime()); // Запуск корутины&#10;}&#10;&#10;IEnumerator DelayTime()&#10;{&#10;    Debug.Log(&quot;Delay&quot;);&#10;    yield return new WaitForSeconds(delaySpawnTime);&#10;&#10;    spawnObject.gameObject.SetActive(true);&#10;}&#10;```&#10;&#10;Теперь, когда метод `DelayTime()` вызывается с помощью `StartCoroutine()`, корутина будет выполняться и создавать задержку, указанную в `delaySpawnTime`. Убедитесь, что значение `delaySpawnTime` больше нуля, чтобы задержка была заметной." />
              <option name="responseFileName" value="" />
              <option name="responseFilePath" value="" />
              <option name="responseTms" value="1704304040536" />
              <option name="usedFilesPaths">
                <list>
                  <option value="$PROJECT_DIR$/Assets/Scripts/Spawn.cs" />
                </list>
              </option>
            </ChatHistoryModel>
          </value>
        </entry>
        <entry key="c6ba3d">
          <value>
            <ChatHistoryModel>
              <option name="contextFilesPaths">
                <list>
                  <option value="$PROJECT_DIR$/Assets/Scripts/Spawn.cs" />
                </list>
              </option>
              <option name="id" value="c6ba3d" />
              <option name="initiateTms" value="1704303885224" />
              <option name="request" value="но у меня есть вызов метода" />
              <option name="response" value="" />
              <option name="responseDescription" value="Извините за недоразумение. В вашем коде я вижу вызов метода `StartCoroutine(DelayTime())`, который должен запускать корутину `DelayTime()`. Однако, я заметил, что в вашем коде отсутствует блок кода, который должен выполняться после задержки.&#10;&#10;Чтобы корутина работала должным образом, вам нужно добавить код, который должен выполняться после задержки, внутри блока `yield return new WaitForSeconds(delaySpawnTime)`. Вот пример, как вы можете изменить ваш код:&#10;&#10;```csharp&#10;IEnumerator DelayTime()&#10;{&#10;    Debug.Log(&quot;Delay&quot;);&#10;    yield return new WaitForSeconds(delaySpawnTime);&#10;&#10;    // Код, который должен выполняться после задержки&#10;    spawnObject.gameObject.SetActive(true);&#10;    // spawnObject.GetComponent&lt;HealthSystem&gt;().Death -= OnDeath;&#10;}&#10;```&#10;&#10;Теперь, после задержки, код внутри блока `yield return new WaitForSeconds(delaySpawnTime)` будет выполнен. Убедитесь, что значение `delaySpawnTime` больше нуля, чтобы задержка была заметной." />
              <option name="responseFileName" value="" />
              <option name="responseFilePath" value="" />
              <option name="responseTms" value="1704303891333" />
              <option name="usedFilesPaths">
                <list>
                  <option value="$PROJECT_DIR$/Assets/Scripts/Spawn.cs" />
                </list>
              </option>
            </ChatHistoryModel>
          </value>
        </entry>
        <entry key="c86fac">
          <value>
            <ChatHistoryModel>
              <option name="contextFilesPaths">
                <list>
                  <option value="$PROJECT_DIR$/Assets/Scripts/Player/Stats.cs" />
                </list>
              </option>
              <option name="id" value="c86fac" />
              <option name="initiateTms" value="1704461701653" />
              <option name="request" value="как мне сделать метод для добавления любого из параметров в одном методе?" />
              <option name="response" value="" />
              <option name="responseDescription" value="Вы можете создать универсальный метод для добавления значений к любому из параметров, используя рефлексию в C#. Вот пример, как это можно сделать:&#10;&#10;```csharp&#10;public void AddStat(string statName, float value)&#10;{&#10;    // Получаем информацию о поле с заданным именем&#10;    var field = GetType().GetField(statName);&#10;&#10;    // Проверяем, что поле существует и является типом float&#10;    if (field != null &amp;&amp; field.FieldType == typeof(float))&#10;    {&#10;        // Получаем текущее значение поля&#10;        var currentValue = (float)field.GetValue(this);&#10;&#10;        // Добавляем значение к текущему значению&#10;        var newValue = currentValue + value;&#10;&#10;        // Устанавливаем новое значение поля&#10;        field.SetValue(this, newValue);&#10;    }&#10;    else&#10;    {&#10;        Debug.LogError(&quot;Invalid stat name or type: &quot; + statName);&#10;    }&#10;}&#10;```&#10;&#10;Теперь вы можете вызывать метод `AddStat()` и передавать имя параметра и значение, которое вы хотите добавить. Например:&#10;&#10;```csharp&#10;AddStat(&quot;strength&quot;, 10f); // Добавить 10 к параметру strength&#10;AddStat(&quot;agility&quot;, -5f); // Вычесть 5 из параметра agility&#10;```&#10;&#10;Обратите внимание, что имя параметра должно точно соответствовать имени поля в классе `Stats`, иначе будет выдана ошибка." />
              <option name="responseFileName" value="" />
              <option name="responseFilePath" value="" />
              <option name="responseTms" value="1704461711124" />
              <option name="usedFilesPaths">
                <list>
                  <option value="$PROJECT_DIR$/Assets/Scripts/Player/Stats.cs" />
                </list>
              </option>
            </ChatHistoryModel>
          </value>
        </entry>
        <entry key="d0f5d8">
          <value>
            <ChatHistoryModel>
              <option name="contextFilesPaths">
                <list>
                  <option value="$PROJECT_DIR$/Assets/Scripts/Player/Experience.cs" />
                </list>
              </option>
              <option name="id" value="d0f5d8" />
              <option name="initiateTms" value="1705242507366" />
              <option name="request" value="как сделать proprty" />
              <option name="response" value="" />
              <option name="responseDescription" value="Чтобы создать свойство (property) в C#, вы можете использовать ключевые слова `get` и `set`. Свойства позволяют вам определить специальные методы доступа для чтения (get) и записи (set) значения свойства. Вот пример создания свойства в вашем коде:&#10;&#10;```csharp&#10;public class Experience : MonoBehaviour&#10;{&#10;    private int exp;&#10;    private int maxExp;&#10;&#10;    public int Exp&#10;    {&#10;        get { return exp; } // Метод доступа для чтения значения свойства&#10;        set { exp = value; } // Метод доступа для записи значения свойства&#10;    }&#10;&#10;    public int MaxExp&#10;    {&#10;        get { return maxExp; } // Метод доступа для чтения значения свойства&#10;        set { maxExp = value; } // Метод доступа для записи значения свойства&#10;    }&#10;&#10;    public int Level&#10;    {&#10;        get { return exp / maxExp; } // Метод доступа для вычисления значения свойства&#10;    }&#10;}&#10;```&#10;&#10;В этом примере мы создаем три свойства: `Exp`, `MaxExp` и `Level`. Свойства `Exp` и `MaxExp` имеют методы доступа `get` и `set`, которые позволяют получать и устанавливать значения переменных `exp` и `maxExp`. Свойство `Level` имеет только метод доступа `get`, который вычисляет и возвращает уровень на основе значений `exp` и `maxExp`.&#10;&#10;Вы можете использовать эти свойства, как обычные переменные, для получения и установки значений. Например:&#10;&#10;```csharp&#10;Experience experience = new Experience();&#10;experience.Exp = 100; // Установка значения свойства Exp&#10;int currentExp = experience.Exp; // Получение значения свойства Exp&#10;int currentLevel = experience.Level; // Получение значения свойства Level&#10;```&#10;&#10;В этом примере мы создаем экземпляр класса `Experience` и используем свойство `Exp` для установки значения опыта (`100`) и свойство `Level` для получения текущего уровня.&#10;&#10;Надеюсь, это поможет вам создать свойства в вашем коде. Если у вас возникнут дополнительные вопросы, пожалуйста, дайте мне знать." />
              <option name="responseFileName" value="" />
              <option name="responseFilePath" value="" />
              <option name="responseTms" value="1705242516717" />
              <option name="usedFilesPaths">
                <list>
                  <option value="$PROJECT_DIR$/Assets/Scripts/Player/Experience.cs" />
                </list>
              </option>
            </ChatHistoryModel>
          </value>
        </entry>
        <entry key="d1a729">
          <value>
            <ChatHistoryModel>
              <option name="contextFilesPaths">
                <list>
                  <option value="$PROJECT_DIR$/Assets/Scripts/Spawn.cs" />
                </list>
              </option>
              <option name="id" value="d1a729" />
              <option name="initiateTms" value="1704303977653" />
              <option name="request" value="оно не вызывается" />
              <option name="response" value="" />
              <option name="responseDescription" value="Приношу извинения за путаницу. Я заметил, что в вашем коде отсутствует вызов метода `StartCoroutine()` для запуска корутины `DelayTime()`. Вот как вы можете изменить ваш код, чтобы корутина начала работать:&#10;&#10;```csharp&#10;private void OnDeath(GameObject target)&#10;{&#10;    spawnObject.gameObject.SetActive(false);&#10;    spawnObject.transform.position = new Vector3(spawnPoint.position.x, spawnObject.transform.position.y, spawnPoint.position.z);&#10;    StartCoroutine(DelayTime()); // Запуск корутины&#10;}&#10;&#10;IEnumerator DelayTime()&#10;{&#10;    Debug.Log(&quot;Delay&quot;);&#10;    yield return new WaitForSeconds(delaySpawnTime);&#10;&#10;    spawnObject.gameObject.SetActive(true);&#10;}&#10;```&#10;&#10;Теперь, когда метод `DelayTime()` вызывается с помощью `StartCoroutine()`, корутина будет выполняться и создавать задержку, указанную в `delaySpawnTime`. Убедитесь, что значение `delaySpawnTime` больше нуля, чтобы задержка была заметной." />
              <option name="responseFileName" value="" />
              <option name="responseFilePath" value="" />
              <option name="responseTms" value="1704303980765" />
              <option name="usedFilesPaths">
                <list>
                  <option value="$PROJECT_DIR$/Assets/Scripts/Spawn.cs" />
                </list>
              </option>
            </ChatHistoryModel>
          </value>
        </entry>
        <entry key="d96910">
          <value>
            <ChatHistoryModel>
              <option name="contextFilesPaths">
                <list>
                  <option value="$PROJECT_DIR$/Assets/Scripts/Spawn.cs" />
                </list>
              </option>
              <option name="id" value="d96910" />
              <option name="initiateTms" value="1704303855054" />
              <option name="request" value="не вызывается" />
              <option name="response" value="" />
              <option name="responseDescription" value="Извините за путаницу. Я заметил, что в вашем коде отсутствует вызов метода `StartCoroutine()` для запуска корутины `DelayTime()`. Вот как вы можете изменить ваш код, чтобы корутина начала работать:&#10;&#10;```csharp&#10;private void OnDeath(GameObject target)&#10;{&#10;    spawnObject.gameObject.SetActive(false);&#10;    spawnObject.transform.position = new Vector3(spawnPoint.position.x, spawnObject.transform.position.y, spawnPoint.position.z);&#10;    StartCoroutine(DelayTime()); // Запуск корутины&#10;    spawnObject.gameObject.SetActive(true);&#10;}&#10;```&#10;&#10;Теперь, когда метод `DelayTime()` вызывается с помощью `StartCoroutine()`, корутина будет выполняться и создавать задержку, указанную в `delaySpawnTime`. Убедитесь, что значение `delaySpawnTime` больше нуля, чтобы задержка была заметной." />
              <option name="responseFileName" value="" />
              <option name="responseFilePath" value="" />
              <option name="responseTms" value="1704303859681" />
              <option name="usedFilesPaths">
                <list>
                  <option value="$PROJECT_DIR$/Assets/Scripts/Spawn.cs" />
                </list>
              </option>
            </ChatHistoryModel>
          </value>
        </entry>
        <entry key="e6a68e">
          <value>
            <ChatHistoryModel>
              <option name="contextFilesPaths">
                <list>
                  <option value="$PROJECT_DIR$/Assets/Scripts/DamageSystem/DamageSystem.cs" />
                </list>
              </option>
              <option name="id" value="e6a68e" />
              <option name="initiateTms" value="1705148191965" />
              <option name="request" value="в чем моя ошибка?" />
              <option name="response" value="" />
              <option name="responseDescription" value="В вашем коде есть несколько проблем, которые могут вызывать ошибку:&#10;&#10;1. Ошибка в объявлении перечисления: Ваше объявление перечисления `Objects` не является правильным синтаксисом для объявления перечисления в C#. Вместо этого, вы должны использовать ключевое слово `enum` для объявления перечисления. Вот правильное объявление перечисления:&#10;&#10;```csharp&#10;public enum Objects&#10;{&#10;    player,&#10;    enemy,&#10;    tree&#10;}&#10;```&#10;&#10;2. Ошибка в использовании перечисления: В вашем коде вы пытаетесь использовать перечисление `Objects` в качестве типа переменной `obj`, но вы не объявили эту переменную. Чтобы исправить это, вы должны объявить переменную `obj` типа `Objects` и присвоить ей одно из значений перечисления. Например:&#10;&#10;```csharp&#10;Objects obj = Objects.player; // Присвоение значения player переменной obj&#10;```&#10;&#10;3. Ошибка в использовании переменной `obj`: В вашем коде вы не используете переменную `obj` нигде. Убедитесь, что вы используете переменную `obj` в нужном месте вашего кода.&#10;&#10;Проверьте эти места в вашем коде и внесите соответствующие изменения, чтобы исправить ошибки. Если у вас возникнут дополнительные вопросы или проблемы, пожалуйста, предоставьте больше информации, чтобы я мог помочь вам более точно." />
              <option name="responseFileName" value="" />
              <option name="responseFilePath" value="" />
              <option name="responseTms" value="1705148197036" />
              <option name="usedFilesPaths">
                <list>
                  <option value="$PROJECT_DIR$/Assets/Scripts/DamageSystem/DamageSystem.cs" />
                </list>
              </option>
            </ChatHistoryModel>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>